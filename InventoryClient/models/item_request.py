# coding: utf-8

"""
    InventoryAPI

    Orkiv Inventory API client 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ItemRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id=None, category=None, desc=None, name=None, ordprice=None, price=None, quantity=None):
        """
        ItemRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'category': 'str',
            'desc': 'str',
            'name': 'str',
            'ordprice': 'float',
            'price': 'str',
            'quantity': 'str'
        }

        self.attribute_map = {
            'id': 'id',
            'category': 'category',
            'desc': 'desc',
            'name': 'name',
            'ordprice': 'ordprice',
            'price': 'price',
            'quantity': 'quantity'
        }

        self._id = id
        self._category = category
        self._desc = desc
        self._name = name
        self._ordprice = ordprice
        self._price = price
        self._quantity = quantity

    @property
    def id(self):
        """
        Gets the id of this ItemRequest.
        ID of item

        :return: The id of this ItemRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ItemRequest.
        ID of item

        :param id: The id of this ItemRequest.
        :type: str
        """

        self._id = id

    @property
    def category(self):
        """
        Gets the category of this ItemRequest.
        Category ID of item

        :return: The category of this ItemRequest.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this ItemRequest.
        Category ID of item

        :param category: The category of this ItemRequest.
        :type: str
        """

        self._category = category

    @property
    def desc(self):
        """
        Gets the desc of this ItemRequest.
        Rich text description of item

        :return: The desc of this ItemRequest.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc):
        """
        Sets the desc of this ItemRequest.
        Rich text description of item

        :param desc: The desc of this ItemRequest.
        :type: str
        """

        self._desc = desc

    @property
    def name(self):
        """
        Gets the name of this ItemRequest.
        Name of item

        :return: The name of this ItemRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ItemRequest.
        Name of item

        :param name: The name of this ItemRequest.
        :type: str
        """

        self._name = name

    @property
    def ordprice(self):
        """
        Gets the ordprice of this ItemRequest.
        Integer value of price

        :return: The ordprice of this ItemRequest.
        :rtype: float
        """
        return self._ordprice

    @ordprice.setter
    def ordprice(self, ordprice):
        """
        Sets the ordprice of this ItemRequest.
        Integer value of price

        :param ordprice: The ordprice of this ItemRequest.
        :type: float
        """

        self._ordprice = ordprice

    @property
    def price(self):
        """
        Gets the price of this ItemRequest.
        String value of price

        :return: The price of this ItemRequest.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this ItemRequest.
        String value of price

        :param price: The price of this ItemRequest.
        :type: str
        """

        self._price = price

    @property
    def quantity(self):
        """
        Gets the quantity of this ItemRequest.
        Inventory quantity

        :return: The quantity of this ItemRequest.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this ItemRequest.
        Inventory quantity

        :param quantity: The quantity of this ItemRequest.
        :type: str
        """

        self._quantity = quantity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
