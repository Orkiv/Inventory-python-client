# coding: utf-8

"""
    InventoryAPI

    Orkiv Inventory API client 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class EventRequest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, url=None, serviceid=None, postbody=None):
        """
        EventRequest - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'url': 'str',
            'serviceid': 'str',
            'postbody': 'str'
        }

        self.attribute_map = {
            'url': 'url',
            'serviceid': 'serviceid',
            'postbody': 'postbody'
        }

        self._url = url
        self._serviceid = serviceid
        self._postbody = postbody

    @property
    def url(self):
        """
        Gets the url of this EventRequest.
        URL for the server to request on successful subscription to specified service

        :return: The url of this EventRequest.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this EventRequest.
        URL for the server to request on successful subscription to specified service

        :param url: The url of this EventRequest.
        :type: str
        """

        self._url = url

    @property
    def serviceid(self):
        """
        Gets the serviceid of this EventRequest.
        ServiceID to bind event to.

        :return: The serviceid of this EventRequest.
        :rtype: str
        """
        return self._serviceid

    @serviceid.setter
    def serviceid(self, serviceid):
        """
        Sets the serviceid of this EventRequest.
        ServiceID to bind event to.

        :param serviceid: The serviceid of this EventRequest.
        :type: str
        """

        self._serviceid = serviceid

    @property
    def postbody(self):
        """
        Gets the postbody of this EventRequest.
        Valid JSON of Key-value parameters to post to url

        :return: The postbody of this EventRequest.
        :rtype: str
        """
        return self._postbody

    @postbody.setter
    def postbody(self, postbody):
        """
        Sets the postbody of this EventRequest.
        Valid JSON of Key-value parameters to post to url

        :param postbody: The postbody of this EventRequest.
        :type: str
        """

        self._postbody = postbody

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
