# coding: utf-8

"""
    InventoryAPI

    Orkiv Inventory API client 

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class Order(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, order_id=None, info_email=None, info_first=None, info_last=None, phone=None, shipset=None, info_adr1=None, info_adr2=None, info_cty=None, info_zip=None, state=None, info_sadr1=None, info_sadr2=None, info_scty=None, info_szip=None, sstate=None, tax_amount=None, shipping_amount=None, amount_total=None, item_i_ds=None):
        """
        Order - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'order_id': 'str',
            'info_email': 'str',
            'info_first': 'str',
            'info_last': 'str',
            'phone': 'str',
            'shipset': 'bool',
            'info_adr1': 'str',
            'info_adr2': 'str',
            'info_cty': 'str',
            'info_zip': 'str',
            'state': 'str',
            'info_sadr1': 'str',
            'info_sadr2': 'str',
            'info_scty': 'str',
            'info_szip': 'str',
            'sstate': 'str',
            'tax_amount': 'float',
            'shipping_amount': 'float',
            'amount_total': 'float',
            'item_i_ds': 'list[str]'
        }

        self.attribute_map = {
            'order_id': 'order_id',
            'info_email': 'info_email',
            'info_first': 'info_first',
            'info_last': 'info_last',
            'phone': 'phone',
            'shipset': 'shipset',
            'info_adr1': 'info_adr1',
            'info_adr2': 'info_adr2',
            'info_cty': 'info_cty',
            'info_zip': 'info_zip',
            'state': 'state',
            'info_sadr1': 'info_sadr1',
            'info_sadr2': 'info_sadr2',
            'info_scty': 'info_scty',
            'info_szip': 'info_szip',
            'sstate': 'sstate',
            'tax_amount': 'tax_amount',
            'shipping_amount': 'shipping_amount',
            'amount_total': 'amount_total',
            'item_i_ds': 'itemIDs'
        }

        self._order_id = order_id
        self._info_email = info_email
        self._info_first = info_first
        self._info_last = info_last
        self._phone = phone
        self._shipset = shipset
        self._info_adr1 = info_adr1
        self._info_adr2 = info_adr2
        self._info_cty = info_cty
        self._info_zip = info_zip
        self._state = state
        self._info_sadr1 = info_sadr1
        self._info_sadr2 = info_sadr2
        self._info_scty = info_scty
        self._info_szip = info_szip
        self._sstate = sstate
        self._tax_amount = tax_amount
        self._shipping_amount = shipping_amount
        self._amount_total = amount_total
        self._item_i_ds = item_i_ds

    @property
    def order_id(self):
        """
        Gets the order_id of this Order.
        Order ID

        :return: The order_id of this Order.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """
        Sets the order_id of this Order.
        Order ID

        :param order_id: The order_id of this Order.
        :type: str
        """

        self._order_id = order_id

    @property
    def info_email(self):
        """
        Gets the info_email of this Order.
        Customer email

        :return: The info_email of this Order.
        :rtype: str
        """
        return self._info_email

    @info_email.setter
    def info_email(self, info_email):
        """
        Sets the info_email of this Order.
        Customer email

        :param info_email: The info_email of this Order.
        :type: str
        """

        self._info_email = info_email

    @property
    def info_first(self):
        """
        Gets the info_first of this Order.
        Customer first name

        :return: The info_first of this Order.
        :rtype: str
        """
        return self._info_first

    @info_first.setter
    def info_first(self, info_first):
        """
        Sets the info_first of this Order.
        Customer first name

        :param info_first: The info_first of this Order.
        :type: str
        """

        self._info_first = info_first

    @property
    def info_last(self):
        """
        Gets the info_last of this Order.
        Customer last name

        :return: The info_last of this Order.
        :rtype: str
        """
        return self._info_last

    @info_last.setter
    def info_last(self, info_last):
        """
        Sets the info_last of this Order.
        Customer last name

        :param info_last: The info_last of this Order.
        :type: str
        """

        self._info_last = info_last

    @property
    def phone(self):
        """
        Gets the phone of this Order.
        Customer phone number

        :return: The phone of this Order.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """
        Sets the phone of this Order.
        Customer phone number

        :param phone: The phone of this Order.
        :type: str
        """

        self._phone = phone

    @property
    def shipset(self):
        """
        Gets the shipset of this Order.
        Customer billing address matches shipping address

        :return: The shipset of this Order.
        :rtype: bool
        """
        return self._shipset

    @shipset.setter
    def shipset(self, shipset):
        """
        Sets the shipset of this Order.
        Customer billing address matches shipping address

        :param shipset: The shipset of this Order.
        :type: bool
        """

        self._shipset = shipset

    @property
    def info_adr1(self):
        """
        Gets the info_adr1 of this Order.
        Customer billing address line '1'

        :return: The info_adr1 of this Order.
        :rtype: str
        """
        return self._info_adr1

    @info_adr1.setter
    def info_adr1(self, info_adr1):
        """
        Sets the info_adr1 of this Order.
        Customer billing address line '1'

        :param info_adr1: The info_adr1 of this Order.
        :type: str
        """

        self._info_adr1 = info_adr1

    @property
    def info_adr2(self):
        """
        Gets the info_adr2 of this Order.
        Customer billing address line '2'

        :return: The info_adr2 of this Order.
        :rtype: str
        """
        return self._info_adr2

    @info_adr2.setter
    def info_adr2(self, info_adr2):
        """
        Sets the info_adr2 of this Order.
        Customer billing address line '2'

        :param info_adr2: The info_adr2 of this Order.
        :type: str
        """

        self._info_adr2 = info_adr2

    @property
    def info_cty(self):
        """
        Gets the info_cty of this Order.
        Customer billing city

        :return: The info_cty of this Order.
        :rtype: str
        """
        return self._info_cty

    @info_cty.setter
    def info_cty(self, info_cty):
        """
        Sets the info_cty of this Order.
        Customer billing city

        :param info_cty: The info_cty of this Order.
        :type: str
        """

        self._info_cty = info_cty

    @property
    def info_zip(self):
        """
        Gets the info_zip of this Order.
        Customer billing zip code

        :return: The info_zip of this Order.
        :rtype: str
        """
        return self._info_zip

    @info_zip.setter
    def info_zip(self, info_zip):
        """
        Sets the info_zip of this Order.
        Customer billing zip code

        :param info_zip: The info_zip of this Order.
        :type: str
        """

        self._info_zip = info_zip

    @property
    def state(self):
        """
        Gets the state of this Order.
        Customer billing state

        :return: The state of this Order.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this Order.
        Customer billing state

        :param state: The state of this Order.
        :type: str
        """

        self._state = state

    @property
    def info_sadr1(self):
        """
        Gets the info_sadr1 of this Order.
        Customer shipping address line '1'

        :return: The info_sadr1 of this Order.
        :rtype: str
        """
        return self._info_sadr1

    @info_sadr1.setter
    def info_sadr1(self, info_sadr1):
        """
        Sets the info_sadr1 of this Order.
        Customer shipping address line '1'

        :param info_sadr1: The info_sadr1 of this Order.
        :type: str
        """

        self._info_sadr1 = info_sadr1

    @property
    def info_sadr2(self):
        """
        Gets the info_sadr2 of this Order.
        Customer shipping address line '2'

        :return: The info_sadr2 of this Order.
        :rtype: str
        """
        return self._info_sadr2

    @info_sadr2.setter
    def info_sadr2(self, info_sadr2):
        """
        Sets the info_sadr2 of this Order.
        Customer shipping address line '2'

        :param info_sadr2: The info_sadr2 of this Order.
        :type: str
        """

        self._info_sadr2 = info_sadr2

    @property
    def info_scty(self):
        """
        Gets the info_scty of this Order.
        Customer shipping city

        :return: The info_scty of this Order.
        :rtype: str
        """
        return self._info_scty

    @info_scty.setter
    def info_scty(self, info_scty):
        """
        Sets the info_scty of this Order.
        Customer shipping city

        :param info_scty: The info_scty of this Order.
        :type: str
        """

        self._info_scty = info_scty

    @property
    def info_szip(self):
        """
        Gets the info_szip of this Order.
        Customer shipping zip code

        :return: The info_szip of this Order.
        :rtype: str
        """
        return self._info_szip

    @info_szip.setter
    def info_szip(self, info_szip):
        """
        Sets the info_szip of this Order.
        Customer shipping zip code

        :param info_szip: The info_szip of this Order.
        :type: str
        """

        self._info_szip = info_szip

    @property
    def sstate(self):
        """
        Gets the sstate of this Order.
        Customer shipping state

        :return: The sstate of this Order.
        :rtype: str
        """
        return self._sstate

    @sstate.setter
    def sstate(self, sstate):
        """
        Sets the sstate of this Order.
        Customer shipping state

        :param sstate: The sstate of this Order.
        :type: str
        """

        self._sstate = sstate

    @property
    def tax_amount(self):
        """
        Gets the tax_amount of this Order.
        Tax amount in hundreds. Must divide by '100' for USD value

        :return: The tax_amount of this Order.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """
        Sets the tax_amount of this Order.
        Tax amount in hundreds. Must divide by '100' for USD value

        :param tax_amount: The tax_amount of this Order.
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def shipping_amount(self):
        """
        Gets the shipping_amount of this Order.
        Shipping total in USD

        :return: The shipping_amount of this Order.
        :rtype: float
        """
        return self._shipping_amount

    @shipping_amount.setter
    def shipping_amount(self, shipping_amount):
        """
        Sets the shipping_amount of this Order.
        Shipping total in USD

        :param shipping_amount: The shipping_amount of this Order.
        :type: float
        """

        self._shipping_amount = shipping_amount

    @property
    def amount_total(self):
        """
        Gets the amount_total of this Order.
        Checkout total in USD

        :return: The amount_total of this Order.
        :rtype: float
        """
        return self._amount_total

    @amount_total.setter
    def amount_total(self, amount_total):
        """
        Sets the amount_total of this Order.
        Checkout total in USD

        :param amount_total: The amount_total of this Order.
        :type: float
        """

        self._amount_total = amount_total

    @property
    def item_i_ds(self):
        """
        Gets the item_i_ds of this Order.
        Array of items purchased at checkout

        :return: The item_i_ds of this Order.
        :rtype: list[str]
        """
        return self._item_i_ds

    @item_i_ds.setter
    def item_i_ds(self, item_i_ds):
        """
        Sets the item_i_ds of this Order.
        Array of items purchased at checkout

        :param item_i_ds: The item_i_ds of this Order.
        :type: list[str]
        """

        self._item_i_ds = item_i_ds

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
